<launch>
  <!-- Arguments -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <!-- Base our simulation world on the empty world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find waldo_sim)/worlds/waldo.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description"
	 command="rosrun xacro xacro '$(find waldo_description)/urdf/kr16_2.xacro'" />

  <!-- Load ROS control simulation configuration for Gazebo -->
  <!--<rosparam file="$(find waldo_control)/config/gazebo_ros_control.yaml" command="load"/>-->

  <!-- Publish joint states -->
  <!--
  <rosparam command="load" file="$(find joint_state_controller)/joint_state_controller.yaml" />
  <node name="joint_state_controller_spawner" pkg="controller_manager" type="spawner" output="screen" args="joint_state_controller" />
  -->

  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
	args="-urdf -model kr16_2 -param robot_description -robot_namespace waldo"/>

  <!-- <include file="$(find waldo_control)/launch/waldo_control.launch"/> -->

</launch>